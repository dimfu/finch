volumes:
  postgres:

networks:
  backend:

services:
  authentication-db:
    image: postgres:17
    restart: unless-stopped
    env_file:
      - ".env"
    # To be sure to run migrations only when postgres is ready to receive connections
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 1s
      retries: 5
    ports:
      - "6000:5432"
    volumes:
      - "postgres:/data/db"
    extra_hosts:
      - "localhost:127.0.0.1"
    networks:
      - backend

  authentication-db-migrations:
    image: ghcr.io/kukymbr/goose-docker:latest
    restart: no
    env_file:
      - .env
    volumes:
      - ./authentication/db/migrations:/migrations
    working_dir: /migrations
    command: ["up"]
    # To be sure to run migrations only when postgres is ready to receive connections
    depends_on:
      authentication-db:
        condition: service_healthy
    networks:
      - backend

  authentication-service:
    env_file:
      - ".env"
    build:
      dockerfile: "./images/authentication.Dockerfile"
      context: "."
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      - "authentication-db"

  client:
    env_file:
      - ".env"
    build:
      dockerfile: "./images/client.Dockerfile"
      context: "."
    ports:
      - "8081:8081"
    networks:
      - backend
    depends_on:
      - "authentication-service"

  nginx:
    build:
      dockerfile: "./images/nginx.Dockerfile"
      context: "."
    ports:
      - "3000:3000"
    depends_on:
      - "authentication-service"
    networks:
      - backend
